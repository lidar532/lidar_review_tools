# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/detect_lidar_water_surface.ipynb.

# %% auto 0
__all__ = ['detect_lidar_water_surface']

# %% ../nbs/detect_lidar_water_surface.ipynb 5
import pandas            as pd 
import haversine         as hs
import numpy             as np
import os
import matplotlib.pyplot as plt
import sys

# %% ../nbs/detect_lidar_water_surface.ipynb 9
def detect_lidar_water_surface( 
  df,                                                # DataFrame or Numpy data containing a column of LiDAR elevations.
  col             = 'elev',                          # Label of elevation data. 
  thresh          = 4,                               # Minimum number of elevations required for water surface detection.
  binsize         = 0.1,                             # Elevation binsize in meters.
  plot            = True,                            # Optionally generate plots of the elevation histogram, and inputelevations.
  height          = 4,                               # Height of the plot.
  width           = 10,                              # Width of the plot.
  title           = 'Lidar Water Surface Detector',  # Plot title.
  xlabel          = 'Elevations [m]',                # Plot X axis label.
  ylabel          = 'Range Bin Count',               # Plot Y axis label.
  title_fontsize  = 14,                              # Plot title font size, (points)
  xlabel_fontsize = 12,                              # Plot xlabel font size, (points)
  ylabel_fontsize = 12                               # Plot ylabel font size (points)
  ) -> object:                                       # A class containing attributes.
  """
  Find the water surface in a Pandas dataframe or numpy array.
  """
  class RV:
    pass
  rv = RV()
  rv.water_found = False
  rv.binsize     = binsize
  rv.thresh      = thresh
  rv.plot        = plot
  rv.ele_min     = np.min(df[col])
  rv.ele_max     = np.max(df[col])
  rv.surface_bin_value = None 

  # Compute the elevation difference to make sure it's not crazy
  rv.peak_elevation_dif = rv.ele_max - rv.ele_min

  # Generate the x axis bins
  rv.bins = np.arange(rv.ele_min, rv.ele_max+1.0, 0.1)

  # Compute the histogram.  Any water surface return shoud produce a
  # spike in the histogram
  rv.hist = np.histogram(df[col], bins = rv.bins)

  # Find the bin with the maximum number of hits.
  rv.max_v = np.max( rv.hist[0] )

  # If the hit count exceeds the uesr's threshold, then we probably
  # found the water surface.
  if rv.max_v >= thresh:
    rv.water_found = True
    # rv.surface_idx = np.where( rv.hist[0] >= thresh )[0][0]
    rv.surface_idx = np.where( rv.hist[0] == rv.max_v )[0][0]
    rv.surface_bin_value = rv.hist[1][rv.surface_idx]

    # Compute stats for return on the values within the bin
    a = df[ col ]
    rv.low  = rv.surface_bin_value - rv.binsize
    rv.high = rv.surface_bin_value + rv.binsize
    b = a.where( (a > rv.low) & (a < rv.high) ).dropna()
    rv.mean_surface = np.mean( b )
    rv.std_surface  = np.std( b )
    rv.median_surface = np.median( b )
  
  # If the user wants plots, then generate plots of the results
  if plot and rv.water_found:
    plt.figure( figsize=(width,height) )
  
    # Draw the threshold line
    x = rv.hist[1][0], rv.hist[1][-1]
    y = [thresh, thresh]
    plt.plot(x,y, linestyle=':')

    # Plot the word `Threshold` just above the threshold line.
    plt.text( x[0]+.5, y[0]+.1, "Threshold", fontsize=8)

    # Draw the range bin cont data (histogram results)
    plt.plot(rv.hist[1][:-1], rv.hist[0], color='blue')
    x = rv.hist[1][rv.surface_idx]

    # Draw a marker where the water surface was found. 
    plt.scatter( x, rv.max_v, marker='D',  color='green')

    # Draw the mean height in text by the detected peak.
    plt.text( x+.5, rv.max_v-.1, f"{rv.mean_surface:6.3f}m")

    plt.title(   title, fontsize = title_fontsize  )
    plt.xlabel( xlabel, fontsize = xlabel_fontsize )
    plt.ylabel( ylabel, fontsize = ylabel_fontsize )
    plt.show()

  return rv
